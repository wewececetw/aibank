<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Claim;
use App\Tenders;
use App\Order;
use App\BankApiCtx;
use App\User;

use DB;

use App\MainFlow\MainFlow;
use App\MainFlow\ClaimState\State0;
use App\MainFlow\ClaimState\State1;
use App\MainFlow\ClaimState\CreatePdf;

use App\Sms\sendSMS;

use App\Mail\MailTo;
use App\MainFlow\PaymentNoticePdf;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Log;


class ScheduleApiController extends Controller
{
    /**
     * 檢查所有債權狀態
     */
    public function checkAllClaimState()
    {
        $needBidOpenMail = Claim::needBidOpenMail();
        Claim::updateIsSendStart();
        if($needBidOpenMail){
            $m = new MailTo;
            $m->claim_collecting_remind();

        }
        $Claims = Claim::select('claim_id')->get()->toArray();
        foreach ($Claims as $value) {
            $claim_id = $value['claim_id'];
            $claimOld = Claim::find($claim_id)->getAttributes();
            //跑債權檢查流程
            (new MainFlow)->runCheckClaimChange($claim_id);
            $claimNew = Claim::find($claim_id)->getAttributes();
            $change = $this->findModelChange($claimOld,$claimNew);
            if(count($change) > 0){
                $msg = [
                    '狀態改變',
                    $change
                ];
            }else{
                $msg = ['狀態無變化',$claimOld['claim_state']];
            }
            $claim = '債權ID:'.$claim_id;
            $this->loggSchedule('apiCheckClaimState',$claim,$msg);
        }
        //是否需要寄開標信

        /* ========= 2020-03-30 17:16:33 change by Jason ========= */
        $this->checkOrder();

        $this->loggSchedule('apiCheckClaimState','===',['==========']);
    }

    /**
     * 檢查Order並發送簡訊
     */
    public function orderSendSms()
    {
        try {
            $od = DB::select('SELECT
                                u.phone_number as phone_number,
                                o.order_id as order_id
                            FROM
                                orders as o
                                left join users as u on u.virtual_account = o.virtual_account
                            WHERE
                                o.is_send_sms = 0');
            $config = [];
            $ctx = config('sms.MainFlow.sendByOrderCtx');
            foreach($od as $v){
                if(isset($v->phone_number)){
                    $ar = [
                        'phone'=> $v->phone_number,
                        'ctx' => $ctx
                    ];
                    array_push($config,$ar);
                    $order = Order::find($v->order_id);
                    $order->is_send_sms = 1;
                    $order->updated_at = date('Y-m-d H:i:s');
                    $order->save();

                    $title = 'OrderId:'.$order->order_id;
                    $this->loggSchedule('orderSendSms',$title,['簡訊寄送','電話號碼:'.$v->phone_number]);
                }
            }
            $sms = (new sendSMS($config))->run();
            // if($sms){
            //     return response()->json(['status'=>'success']);
            // }else{
            //     return response()->json(['status' => 'some sms fail']);
            // }
        } catch (\Throwable $th) {
            $title = '錯誤';
            $this->loggSchedule('orderSendSms',$title,$th);
        }
    }

    //找差別用
    public function findModelChange($old,$new)
    {
        $res = [];
        foreach ($old as $key => $value) {
            if($value != $new[$key]){
                $res[$key] = $value.'->'.$new[$key];
            }
        }
        return $res;
    }

    public function loggSchedule($type,$title,$msgArray)
    {

        $logpath = 'logs/Schedule/'.$type. '/' . date("Y-m-d") .'/'. date("H") . '.log';
        $log = new Logger('ScheduleApi');
        $log->pushHandler(new StreamHandler(storage_path($logpath)), Logger::DEBUG);
        $log->debug($title, $msgArray);
        Log::debug($msgArray);
    }

    /**
     * 補救送出繳款通知
     *
     *
     */
    public function sendOrder(){
        $claim_certificate_number = "'P000905001S1027691',
        'P000905001S1023804',
        'P000905001S1024412',
        'P000905001S1028161',
        'P000905001S1024423',
        'P000905001S1030311',
        'P000905001S1029851',
        'P000905001S1024671',
        'P000905001S1024261',
        'P000905001S1024473',
        'P001274001S1028261',
        'P001274001S1028281',
        'P001274001S1028321',
        'P001274001S1028361',
        'P001274001S1028421',
        'P001274001S1028451',
        'P001274001S1028571',
        'P001274001S1028601',
        'P001274001S1028611',
        'P001274001S1028661',
        'P001274001S1028711',
        'P001274001S1028821',
        'P001274001S1028841',
        'P001274001S1028961',
        'P001274001S1029041',
        'P001274001S1029241',
        'P001274001S1029371',
        'P001274001S1029471',
        'P001274001S1029511',
        'P001274001S1029561',
        'P001274001S1029641',
        'P001274001S1029681',
        'P001274001S1029691',
        'P001274001S1029731',
        'P001274001S1029791',
        'P001274001S1029871',
        'P001274001S1029981',
        'P001274001S1030021',
        'P001274001S1030041',
        'P001577001S1024613',
        'P001577001S1024643',
        'P001577001S1024733',
        'P001577001S1025053',
        'P001577001S1025291',
        'P001577001S1025471',
        'P001577001S1025482',
        'P001577001S1025572',
        'P001577001S1025712',
        'P001577001S1025722',
        'P001577001S1025732',
        'P001577001S1025741',
        'P001577001S1025922',
        'P001577001S1025952',
        'P001577001S1025972',
        'P001577001S1026162',
        'P001577001S1026181',
        'P001577001S1026291',
        'P001577001S1026322',
        'P001577001S1026351',
        'P001577001S1026431',
        'P001577001S1026471',
        'P001577001S1026512',
        'P001577001S1026551',
        'P001577001S1026661',
        'P001577001S1026671',
        'P001577001S1026701',
        'P001577001S1026721',
        'P001577001S1026751',
        'P001577001S1026801',
        'P001577001S1026831',
        'P001577001S1026901',
        'P001577001S1026911',
        'P001577001S1026941',
        'P001577001S1027021',
        'P001577001S1027031',
        'P001577001S1027081',
        'P001577001S1027091',
        'P001577001S1027101',
        'P001577001S1027161',
        'P001577001S1027171',
        'P001577001S1027191',
        'P001577001S1027201',
        'P001577001S1027281',
        'P001577001S1027301',
        'P001577001S1027361',
        'P001577001S1027401',
        'P001577001S1027561',
        'P001577001S1027571',
        'P001577001S1027581',
        'P001577001S1027591',
        'P001577001S1027601',
        'P001577001S1027611',
        'P001577001S1027621',
        'P001577001S1027631',
        'P001577001S1027641',
        'P001577001S1027671',
        'P001577001S1027741',
        'P001577001S1027881',
        'P001577001S1027891',
        'P001577001S1027961',
        'P001577001S1027971',
        'P001577001S1027991',
        'P001577001S1028001',
        'P001577001S1028011',
        'P000489001S1028081',
        'P001577001S1028181',
        'P001577001S1028191',
        'P001577001S1028211',
        'P001577001S1028231',
        'P000489002S1026831',
        'P000489002S1026901',
        'P000489002S1026911',
        'P000489002S1026941',
        'P000489002S1027021',
        'P000489002S1027031',
        'P000489002S1027081',
        'P000489002S1027091',
        'P000489002S1027101',
        'P000489002S1027161',
        'P000489002S1027171',
        'P000489002S1027191',
        'P000489002S1027201',
        'P000489002S1027281',
        'P000489002S1027301',
        'P000489002S1027361',
        'P000489002S1027401',
        'P000489002S1027561',
        'P000489002S1027571',
        'P000489002S1027581',
        'P000489002S1027591',
        'P000489002S1027601',
        'P000489002S1027611',
        'P000489002S1027621',
        'P000489002S1027631',
        'P000489002S1027641',
        'P000489002S1027671',
        'P000489002S1027741',
        'P000489002S1027881',
        'P000489002S1027891',
        'P000489002S1027961',
        'P000489002S1027971',
        'P000489002S1027991',
        'P000489002S1028001',
        'P001572002S1028081',
        'P000489002S1028181',
        'P000489002S1028191',
        'P000489002S1028211',
        'P000489002S1028231',
        'P000489002S1028261',
        'P001274002S1024473',
        'P001274002S1024613',
        'P001274002S1024643',
        'P001274002S1024733',
        'P001274002S1025053',
        'P001274002S1025291',
        'P001274002S1025471',
        'P001274002S1025482',
        'P001274002S1025572',
        'P001274002S1025712',
        'P001274002S1025722',
        'P001274002S1025732',
        'P001274002S1025741',
        'P001274002S1025922',
        'P001274002S1025952',
        'P001274002S1025972',
        'P001274002S1026162',
        'P001274002S1026181',
        'P001274002S1026291',
        'P001274002S1026322',
        'P001274002S1026351',
        'P001274002S1026431',
        'P001274002S1026471',
        'P001274002S1026512',
        'P001274002S1026551',
        'P001274002S1026661',
        'P001274002S1026671',
        'P001274002S1026701',
        'P001274002S1026721',
        'P001274002S1026751',
        'P001274002S1026801',
        'P001426002S1028281',
        'P001426002S1028321',
        'P001426002S1028361',
        'P001426002S1028421',
        'P001426002S1028451',
        'P001426002S1028571',
        'P001426002S1028601',
        'P001426002S1028611',
        'P001426002S1028661',
        'P001426002S1028711',
        'P001426002S1028821',
        'P001426002S1028841',
        'P001426002S1028961',
        'P001426002S1029041',
        'P001426002S1029241',
        'P001426002S1029371',
        'P001426002S1029471',
        'P001426002S1029511',
        'P001426002S1029561',
        'P001426002S1029641',
        'P001426002S1029681',
        'P001426002S1029691',
        'P001426002S1029731',
        'P001426002S1029791',
        'P001426002S1029871',
        'P001426002S1029981',
        'P001426002S1030021',
        'P001426002S1030041',
        'P000520003S1028841',
        'P000520003S1028961',
        'P000520003S1029041',
        'P000520003S1029241',
        'P000520003S1029371',
        'P000520003S1029511',
        'P000520003S1029561',
        'P000520003S1029641',
        'P000520003S1029681',
        'P000520003S1029691',
        'P000520003S1029731',
        'P000520003S1029791',
        'P000520003S1029871',
        'P000520003S1029981',
        'P000520003S1030021',
        'P000520003S1030041',
        'P000751003S1024643',
        'P000751003S1024733',
        'P000751003S1025053',
        'P000751003S1025291',
        'P000751003S1025471',
        'P000751003S1025482',
        'P000751003S1025572',
        'P000751003S1025712',
        'P000751003S1025722',
        'P000751003S1025732',
        'P000751003S1025741',
        'P000751003S1025922',
        'P000751003S1025952',
        'P000751003S1025972',
        'P000751003S1026162',
        'P000751003S1026181',
        'P000751003S1026291',
        'P000751003S1026322',
        'P000751003S1026351',
        'P000751003S1026431',
        'P000751003S1026471',
        'P000751003S1026512',
        'P000751003S1026551',
        'P000751003S1026661',
        'P000751003S1026671',
        'P000751003S1026701',
        'P000751003S1026721',
        'P000751003S1026751',
        'P000751003S1026801',
        'P000751003S1026831',
        'P001426003S1024473',
        'P001426003S1024613',
        'P001448003S1026901',
        'P001448003S1026911',
        'P001448003S1026941',
        'P001448003S1027031',
        'P001448003S1027081',
        'P001448003S1027091',
        'P001448003S1027101',
        'P001448003S1027161',
        'P001448003S1027171',
        'P001448003S1027191',
        'P001448003S1027201',
        'P001448003S1027281',
        'P001448003S1027301',
        'P001448003S1027361',
        'P001448003S1027401',
        'P001448003S1027561',
        'P001448003S1027571',
        'P001448003S1027581',
        'P001448003S1027591',
        'P001448003S1027601',
        'P001448003S1027611',
        'P001448003S1027621',
        'P001448003S1027631',
        'P001448003S1027641',
        'P001448003S1027671',
        'P001448003S1027741',
        'P001448003S1027881',
        'P001448003S1027891',
        'P001448003S1027961',
        'P001572003S1027971',
        'P001572003S1027991',
        'P001572003S1028001',
        'P001387003S1028081',
        'P001572003S1028181',
        'P001572003S1028191',
        'P001572003S1028211',
        'P001572003S1028231',
        'P001572003S1028261',
        'P001572003S1028281',
        'P001572003S1028321',
        'P001572003S1028361',
        'P001572003S1028421',
        'P001572003S1028451',
        'P001572003S1028571',
        'P001572003S1028601',
        'P001572003S1028611',
        'P001572003S1028661',
        'P001572003S1028711',
        'P001572003S1028821',
        'P000360004S1024733',
        'P000360004S1025053',
        'P000360004S1025291',
        'P000360004S1025471',
        'P000360004S1025482',
        'P000360004S1025572',
        'P000360004S1025712',
        'P000360004S1025722',
        'P000360004S1025732',
        'P000360004S1025741',
        'P000360004S1025922',
        'P000360004S1025952',
        'P000360004S1025972',
        'P000360004S1026162',
        'P000360004S1026181',
        'P000360004S1026291',
        'P000360004S1026322',
        'P000360004S1026351',
        'P000360004S1026431',
        'P000360004S1026471',
        'P000520004S1024613',
        'P000520004S1024643',
        'P000737004S1027281',
        'P000737004S1027301',
        'P000737004S1027361',
        'P000737004S1027401',
        'P000737004S1027571',
        'P000737004S1027581',
        'P000737004S1027591',
        'P000737004S1027601',
        'P000737004S1027611',
        'P000737004S1027621',
        'P000737004S1027631',
        'P000737004S1027641',
        'P000737004S1027671',
        'P000737004S1027741',
        'P000799004S1026512',
        'P000799004S1026551',
        'P000799004S1026661',
        'P000799004S1026671',
        'P000799004S1026701',
        'P000799004S1026721',
        'P000799004S1026751',
        'P000799004S1026801',
        'P000799004S1026831',
        'P000799004S1026901',
        'P000799004S1026911',
        'P000799004S1026941',
        'P000799004S1027081',
        'P000799004S1027091',
        'P000799004S1027101',
        'P000799004S1027161',
        'P000799004S1027171',
        'P000799004S1027191',
        'P000799004S1027201',
        'P001387004S1027881',
        'P001387004S1027891',
        'P001387004S1027961',
        'P001387004S1027971',
        'P001387004S1027991',
        'P001387004S1028001',
        'P000410002S1028011',
        'P001387004S1028181',
        'P001387004S1028191',
        'P001387004S1028211',
        'P001443004S1028231',
        'P001443004S1028261',
        'P001443004S1028281',
        'P001443004S1028321',
        'P001443004S1028361',
        'P001443004S1028421',
        'P001443004S1028451',
        'P001443004S1028571',
        'P001443004S1028601',
        'P001443004S1028611',
        'P001166004S1028711',
        'P001166004S1028821',
        'P001166004S1028841',
        'P001166004S1028961',
        'P001166004S1029041',
        'P001166004S1029241',
        'P001166004S1029511',
        'P001166004S1029561',
        'P001166004S1029641',
        'P001166004S1029681',
        'P001401004S1029691',
        'P001401004S1029791',
        'P001401004S1029871',
        'P001401004S1029981',
        'P001401004S1030021',
        'P001401005S1024613',
        'P001401005S1024643',
        'P001401005S1024733',
        'P001401005S1025053',
        'P001401005S1025291',
        'P000432005S1025471',
        'P000432005S1025482',
        'P000432005S1025572',
        'P000432005S1025712',
        'P000432005S1025722',
        'P000432005S1025732',
        'P000432005S1025741',
        'P000432005S1025922',
        'P000432005S1025952',
        'P000432005S1025972',
        'P001570005S1026162',
        'P001570005S1026181',
        'P001570005S1026291',
        'P001570005S1026322',
        'P001570005S1026351',
        'P001570005S1026431',
        'P001570005S1026471',
        'P001570005S1026512',
        'P001570005S1026551',
        'P001570005S1026671',
        'P001057005S1026701',
        'P001057005S1026751',
        'P001057005S1026801',
        'P001057005S1026831',
        'P001057005S1026901',
        'P001057005S1026941',
        'P001057005S1027081',
        'P001057005S1027091',
        'P001057005S1027101',
        'P001057005S1027161',
        'P001511005S1027171',
        'P001511005S1027191',
        'P001511005S1027281',
        'P001511005S1027301',
        'P001511005S1027361',
        'P001511005S1027401',
        'P001511005S1027571',
        'P001511005S1027581',
        'P001511005S1027591',
        'P001511005S1027601',
        'P001353005S1027611',
        'P001353005S1027621',
        'P001353005S1027631',
        'P001353005S1027641',
        'P001353005S1027671',
        'P001353005S1027741',
        'P001353005S1027881',
        'P001353005S1027891',
        'P001353005S1027961',
        'P001353005S1027971',
        'P000410005S1028001',
        'P001382003S1028011',
        'P000410005S1028181',
        'P000410005S1028211',
        'P000410005S1028231',
        'P000410005S1028261',
        'P000410005S1028281',
        'P000410005S1028321',
        'P000410005S1028361',
        'P000410005S1028421',
        'P001479005S1028451',
        'P001479005S1028571',
        'P001479005S1028601',
        'P001479005S1028611',
        'P001479005S1028711',
        'P001479005S1028821',
        'P001479005S1028841',
        'P001479005S1028961',
        'P001479005S1029041',
        'P001479005S1029241',
        'P001571005S1029511',
        'P001571005S1029561',
        'P001571005S1029691',
        'P001571005S1029791',
        'P001571005S1029871',
        'P001571005S1030021',
        'P001571006S1024613',
        'P001571006S1024643',
        'P001571006S1024733',
        'P001571006S1025053',
        'P000091006S1025291',
        'P000091006S1025471',
        'P000091006S1025482',
        'P000091006S1025572',
        'P000091006S1025712',
        'P000091006S1025722',
        'P000091006S1025732',
        'P000091006S1025741',
        'P000091006S1025922',
        'P000091006S1025952',
        'P000048006S1025972',
        'P000048006S1026162',
        'P000048006S1026181',
        'P000048006S1026291',
        'P000048006S1026322',
        'P000048006S1026351',
        'P001563006S1026431',
        'P001563006S1026471',
        'P001563006S1026551',
        'P001563006S1026701',
        'P001563006S1026751',
        'P001531006S1026901',
        'P001531006S1026941',
        'P001531006S1027081',
        'P001531006S1027101',
        'P001531006S1027161',
        'P000406006S1027171',
        'P000406006S1027191',
        'P000406006S1027281',
        'P000406006S1027301',
        'P000406006S1027361',
        'P001506006S1027571',
        'P001506006S1027581',
        'P001506006S1027591',
        'P001506006S1027601',
        'P001506006S1027621',
        'P001576006S1027631',
        'P001576006S1027641',
        'P001576006S1027671',
        'P001576006S1027741',
        'P001576006S1027881',
        'P001382006S1027891',
        'P001382006S1027961',
        'P001382006S1027971',
        'P001382006S1028001',
        'P001523004S1028011',
        'P001141006S1028181',
        'P001141006S1028211',
        'P001141006S1028231',
        'P001141006S1028261',
        'P001141006S1028281',
        'P000272006S1028321',
        'P000272006S1028361',
        'P000272006S1028571',
        'P000272006S1028601',
        'P000272006S1028711',
        'P001265006S1028821',
        'P001265006S1028841',
        'P001265006S1028961',
        'P001265006S1029041',
        'P001265006S1029241',
        'P000455006S1029511',
        'P000455006S1029561',
        'P000455006S1029791',
        'P000455006S1029871',
        'P000455006S1030021',
        'P001350007S1024733',
        'P001350007S1025053',
        'P001350007S1025291',
        'P001350007S1025471',
        'P001350007S1025482',
        'P000377007S1025572',
        'P000377007S1025722',
        'P000377007S1025741',
        'P000377007S1025922',
        'P000377007S1025952',
        'P000458007S1025972',
        'P000458007S1026291',
        'P000458007S1026351',
        'P000458007S1026431',
        'P000458007S1026701',
        'P001519007S1026751',
        'P001519007S1026901',
        'P001519007S1026941',
        'P001519007S1027101',
        'P001519007S1027171',
        'P000345007S1027301',
        'P000345007S1027571',
        'P000345007S1027581',
        'P000345007S1027591',
        'P000345007S1027621',
        'P001337007S1027671',
        'P001337007S1027741',
        'P001337007S1027881',
        'P001337007S1027961',
        'P001337007S1028001',
        'P000273005S1028011',
        'P001523007S1028181',
        'P001523007S1028211',
        'P001523007S1028231',
        'P001523007S1028261',
        'P001154007S1028281',
        'P001154007S1028321',
        'P001154007S1028571',
        'P001154007S1028601',
        'P001154007S1028821',
        'P001498007S1028841',
        'P001498007S1029041',
        'P001498007S1029241',
        'P001498007S1029511',
        'P001498007S1029561',
        'P000444007S1029791',
        'P000444007S1029871',
        'P000444008S1025291',
        'P000444008S1025471',
        'P000444008S1025741',
        'P001173008S1026291',
        'P001173008S1026351',
        'P001173008S1026701',
        'P001173008S1026751',
        'P001173008S1026901',
        'P001574008S1026941',
        'P001574008S1027101',
        'P001574008S1027171',
        'P001574008S1027301',
        'P001574008S1027571',
        'P000950008S1027581',
        'P000950008S1027591',
        'P000950008S1027621',
        'P000950008S1027671',
        'P000950008S1027741',
        'P000273008S1027881',
        'P000273008S1027961',
        'P000273008S1028001',
        'P001301006S1028011',
        'P000273008S1028181',
        'P001566008S1028211',
        'P001566008S1028231',
        'P001566008S1028261',
        'P001566008S1028281',
        'P001566008S1028321',
        'P000725008S1028571',
        'P000725008S1028601',
        'P000725008S1028821',
        'P000725008S1028841',
        'P000725008S1029041',
        'P000383008S1029241',
        'P000383008S1029511',
        'P000383008S1029561',
        'P000383008S1029791',
        'P000383008S1029871',
        'P000681007S1028011',
        'P001448003S1027021',
        'P000520007S1026181',
        'P001301007S1026471',
        'P001301007S1027081',
        'P001301007S1027161',
        'P001301007S1027191',
        'P001533007S1027361',
        'P001533007S1027601',
        'P001533007S1027631',
        'P001533007S1027641',
        'P001533007S1027891',
        'P001471007S1027971',
        'P001471007S1028361',
        'P001471007S1028711',
        'P001471007S1028961',
        'P001471007S1030021',
        'P001577004S1028081',
        'P000681006S1026671',
        'P000681006S1026801',
        'P000681006S1026831',
        'P000681006S1027091',
        'P000681006S1027401',
        'P001346006S1027611',
        'P001346006S1028421',
        'P001346006S1028451',
        'P001346006S1028611',
        'P001346006S1029691',
        'P000520003S1029471',
        'P001346006S1026512',
        'P001268005S1026721',
        'P001268005S1026911',
        'P001268005S1027991',
        'P001268005S1029641',
        'P001268005S1029681',
        'P001268005S1029981',
        'P001268008S1024733',
        'P001268008S1025053',
        'P000793008S1025482',
        'P000793008S1025572',
        'P000793008S1025722',
        'P000793008S1025922',
        'P000793008S1025952',
        'P000793008S1025972',
        'P000793008S1026431',
        'P000737004S1027561',
        'P000737004S1029371',
        'P000799004S1027031',
        'P000799004S1028661',
        'P000793004S1029731',
        'P000008004S1030041',
        'P000008007S1024613',
        'P000008007S1024643',
        'P000008007S1025712',
        'P000008007S1025732',
        'P000008007S1026162',
        'P000008007S1026322',
        'P000520004S1024473',
        'P001448007S1026551',
        'P001301007S1027281',
        'P001301009S1025291',
        'P001301009S1025471',
        'P001301009S1025741',
        'P001533009S1026291',
        'P001533009S1026351',
        'P001533009S1026701',
        'P001533009S1026751',
        'P001533009S1026901',
        'P001471009S1026941',
        'P001471009S1027101',
        'P001471009S1027171',
        'P001471009S1027301',
        'P001471009S1027571',
        'P000681009S1027581',
        'P001346009S1027591',
        'P001346009S1027621',
        'P001346009S1027671',
        'P001268009S1027741',
        'P001268009S1027881',
        'P000793009S1027961',
        'P000793009S1028001',
        'P000793009S1028181',
        'P000008009S1028211',
        'P000008009S1028231',
        'P000008009S1028261',
        'P000008009S1028281',
        'P000008009S1028321',
        'P000008009S1028571',
        'P000008009S1028601',
        'P000008009S1028821',
        'P000008009S1028841',
        'P000008009S1029041',
        'P000008009S1029241',
        'P000008009S1029511',
        'P000008009S1029561',
        'P000008009S1029791',
        'P000008009S1029871',
        'P001479001A1027141',
        'P001570001B1029741',
        'P001570001B1027251',
        'P001570001B1030301',
        'P001570001B1029721',
        'P001120001B1029441',
        'P001120001A1030281',
        'P001479002B1027251',
        'P001479002A1030281',
        'P001479002B1029441',
        'P001479002B1029721',
        'P001353001C1029881',
        'P001353001C1025332',
        'P001353001B1028471',
        'P001353001C1025622',
        'P001353002A1027141',
        'P001353003A1027141',
        'P001519002C1029881',
        'P001576004A1027141',
        'P000057003B1029721',
        'P000057002C1025332',
        'P000057002B1028471',
        'P000057002C1025622',
        'P000414003B1028471',
        'P000488003C1025622',
        'P000539003B1029441',
        'P001562003C1029881',
        'P000539004B1028471',
        'P000539002B1029741',
        'P000539004C1025622',
        'P001126003C1025332',
        'P000759002B1030301',
        'P000539003B1030301',
        'P001126005B1028471',
        'P001239003A1030281',
        'P001126003B1029741',
        'P001301004B1030301',
        'P001182006B1028471',
        'P000712007B1028471',
        'P000950005C1025622',
        'P000950004C1025332',
        'P000492005C1025332',
        'P000492006C1025622',
        'P000492006C1025332',
        'P001563007C1025622',
        'P001563007C1025332',
        'P001575008C1025622',
        'P001575008C1025332',
        'P000048009C1025332',
        'P001304010C1025332',
        'P000091011C1025332',
        'P001577001B1031021',
        'P001262001S1031161',
        'P001101001S1030471',
        'P001401001S1026611',
        'P001457001S1030081',
        'P000091001S1026811',
        'P000515002S1031161',
        'P001558001S1028931',
        'P001477001S1022361',
        'P000428001S1030801',
        'P001337003S1031161',
        'P000360001S1030321',
        'P000393001S1030361',
        'P001182004S1031161',
        'P001401001S1027791',
        'P001126001S1025651',
        'P000033002S1026611',
        'P001558001S1030201',
        'P001239001S1030291',
        'P000390001S1027821',
        'P000091002S1022361',
        'P001337001S1030101',
        'P001533001S1029081',
        'P001426005S1031161',
        'P001590001S1028291',
        'P000414001S1027931',
        'P001557002S1030291',
        'P000779001S1028091',
        'P001558001S1029941',
        'P001401001S1026491',
        'P000428001S1029911',
        'P000091002S1028291',
        'P001592003S1030291',
        'P001573002S1030361',
        'P001457003S1030361',
        'P001426001S1030171',
        'P001337002S1030801',
        'P001401003S1022361',
        'P000345002S1030081',
        'P000091001S1028391',
        'P001588006S1031161',
        'P000779004S1022361',
        'P000515003S1030081',
        'P001587003S1030801',
        'P001551002S1027791',
        'P001492002S1030101',
        'P001426001S1030591',
        'P001182004S1030361',
        'P001531002S1030171',
        'P001401002S1029081',
        'P000091001S1028071',
        'P001557002S1028391',
        'P000428004S1030081',
        'P001588002S1028071',
        'P001126002S1028091',
        'P001561002S1027931',
        'P001426003S1028071',
        'P001587004S1030801',
        'P001592001S1028771',
        'P000091001S1027951',
        'P000468005S1022361',
        'P001401004S1030291',
        'P001457002S1026811',
        'P001531001S1026641',
        'P001426003S1028291',
        'P000390003S1028391',
        'P001588002S1027951',
        'P000091002S1026641',
        'P001587003S1030171',
        'P001557003S1026641',
        'P001558002S1029911',
        'P000950003S1027951',
        'P001426003S1026811',
        'P001551003S1028091',
        'P001531004S1027951',
        'P001252002S1030471',
        'P000454005S1030291',
        'P001588004S1026811',
        'P000091002S1026491',
        'P001592003S1026611',
        'P001457004S1028291',
        'P001557003S1026491',
        'P000779003S1027791',
        'P000468004S1026641',
        'P000008002S1029941',
        'P001426004S1026491',
        'P000390005S1030801',
        'P001531004S1027791',
        'P000950002S1030591',
        'P001588004S1030171',
        'P000779005S1026491',
        'P001426002S1028771',
        'P000428003S1030471',
        'P000091005S1028291',
        'P000008002S1028931',
        'P001531004S1028091',
        'P001561005S1030171',
        'P000203004S1030471',
        'P001426005S1027951',
        'P000950005S1026811',
        'P000468003S1028771',
        'P001492006S1030291',
        'P001401006S1027951',
        'P001457007S1027951',
        'P000390005S1030361',
        'P000008002S1030201',
        'P000203005S1028091',
        'P001426005S1027791',
        'P001563003S1030591',
        'P001426004S1026611',
        'P000779008S1027951',
        'P001587004S1030591',
        'P000950009S1027951',
        'P001426003S1027931',
        'P001252005S1026611',
        'P000539006S1026811',
        'P001182006S1030171',
        'P001544006S1027791',
        'P000091010S1027951',
        'P001591006S1026611',
        'P000203005S1030081',
        'P000091007S1030171',
        'P001563001S1028681',
        'P001563001S1028901',
        'P001563001S1030691',
        'P001563001S1031101',
        'P001563001S1031111',
        'P001558002S1028681',
        'P001558002S1028901',
        'P001558002S1030691',
        'P001558002S1031101',
        'P001558002S1031111',
        'P000013003S1028901',
        'P000013003S1030691',
        'P000013003S1031101',
        'P000013003S1031111',
        'P000447004S1028901',
        'P000447004S1030691',
        'P000447004S1031101',
        'P000447004S1031111',
        'P001533005S1030691',
        'P000397005S1031101',
        'P000203006S1030691',
        'P000203006S1031101',
        'P000203005S1031111',
        'P001528006S1031111'
        ";
        $tenderIdArray = [];
        $tenderIdsData =  DB::select("SELECT
                                tender_documents_id
                            FROM
                                tender_documents 
                            WHERE
                            claim_certificate_number in ($claim_certificate_number)");
        $orderData = DB::select("SELECT
                                        SUM(td.amount) as expected_amount,
                                        u.user_id
                                        FROM
                                            tender_documents as td, claims as c ,users as u
                                        
                                        WHERE
                                            claim_certificate_number in ($claim_certificate_number) and c.claim_id = td.claim_id and u.user_id = td.user_id
                                            GROUP BY
                                            u.user_id
                                        ");
            foreach ($tenderIdsData as $key => $value) {
                array_push($tenderIdArray,$value->tender_documents_id);
            }

            $pdf_data = [];
            $pay_day = [];
            foreach ($orderData as $k => $v) {
                // $od = new Order;
                // $od->virtual_account = $v->virtual_account;
                // $od->expected_amount = $v->expected_amount;
                // $od->created_at = date('Y-m-d H:i:s');
                // $od->updated_at = date('Y-m-d H:i:s');
                // $od->save();
                // $this->loggSchedule('apiCreateOrder','OrderId'.$od->order_id,['virtual_account='.$od->virtual_account,'expected_amount='.$od->expected_amount]);

                $td = Tenders::select('tender_documents_id')->where('user_id',$v->user_id)->get();

                $pdf_data[$v->user_id] = [
                    // 'order_id' => $od->order_id,
                    'user' => (new User)->getUserBankAccountInfo($v->user_id),
                    'tenders' => [],
                    'totalAmount' => $v->expected_amount,
                ];
                // $pdf_data[$v->user_id] = [
                //     'pay_date' => date("Y-m-d",strtotime($od->created_at)),
                //     'tenders' => []
                // ];

                foreach ($td as $key => $value) {
                    if(in_array($value->tender_documents_id,$tenderIdArray)){
                        //如果這個user_id 找出來的tender 是需要轉換的 tender
                        $tender = Tenders::find($value->tender_documents_id);
                        // $tender->order_id = $od->order_id;
                        // $tender->is_order_create = 1;
                        // $tender->updated_at = date('Y-m-d H:i:s');
                        // $tender->save();
                        $Claims = Claim::find($tender->claim_id);
                        $count_liubio = DB::select('select * from tender_documents where claim_id in(select claim_id from claims where claim_state = 3 and estimated_close_date = ?)and user_id = ?',[$Claims->estimated_close_date,$v->user_id]);
                        $t_ar = [
                            'tender_id' => $value->tender_documents_id,
                            'claim_certificate_number' => $tender->claim_certificate_number,
                            'should_paid_at' => $tender->should_paid_at,
                            'amount' => $tender->amount,
                            'estimated_close_date' => $Claims->estimated_close_date,
                            'count_liubio' => count($count_liubio)
                        ];
                        array_push($pdf_data[$v->user_id]['tenders'],$t_ar);
                    }
                }
            }
            foreach ($pdf_data as $user_id => $d) {
                // $PaymentNoticePdf = new PaymentNoticePdf($d['user'],$d['tenders'],$d['totalAmount'],$d['order_id']);
                // $pdf_path = $PaymentNoticePdf->savePdf();
                // $pdf_path = url('/front/PaymentNoticePdf/'.$d["pay_date"]);
                // 結標信寄法
                $m = new MailTo;
                $m->tender_document_start_to_repay2($user_id,$d['user'],$d['tenders'],$d['totalAmount']);
            }
    }
    /**
     * 建立Order的
     */
    public function checkOrder()
    {
        try {
            DB::beginTransaction();

            $tenders_state3 = DB::select('SELECT
                                        SUM(td.amount) as expected_amount,
                                        u.virtual_account as virtual_account,
                                        u.user_id as user_id,
                                        c.estimated_close_date as estimated_close_date,
                                        c.claim_id as claim_id
                                    FROM
                                        tender_documents AS td
                                    LEFT JOIN claims AS c
                                    ON
                                        c.claim_id = td.claim_id
                                    LEFT JOIN users AS u
                                    ON
                                        u.user_id = td.user_id
                                    WHERE
                                        c.claim_state = 3 AND "'.date("Y-m-d H:i:s").'"> c.estimated_close_date AND c.estimated_close_date > ADDDATE("'.date("Y-m-d H:i:s").'",INTERVAL -1 minute) 
                                    GROUP BY
                                        u.user_id');
                $pdf_data = [];

                foreach($tenders_state3 as $k => $v){
                    $user_check_state2 = DB::select('SELECT
                                            SUM(td.amount) as expected_amount,
                                            u.virtual_account as virtual_account,
                                            u.user_id as user_id
                                        FROM
                                            tender_documents AS td
                                        INNER JOIN claims AS c
                                        ON
                                            c.claim_id = td.claim_id
                                        INNER JOIN users AS u
                                        ON
                                            u.user_id = td.user_id
                                        WHERE
                                            c.claim_state = 2 AND td.is_order_create = 0 and u.user_id = '.$v->user_id.'
                                        GROUP BY
                                            u.user_id');

                    if (count($user_check_state2)==0) {
                        $Claims = Claim::find($v->claim_id);
                        $count_liubio = DB::select('select * from tender_documents where claim_id in(select claim_id from claims where claim_state = 3 and estimated_close_date = ?)and user_id = ?', [$v->estimated_close_date,$v->user_id]);
                        $pdf_data[$v->user_id] = [
                                    'user' => (new User)->getUserBankAccountInfo($v->user_id),
                                    'tenders' => [],
                                    'totalAmount' => 0
                                ];
                        $t_ar = [
                                'estimated_close_date' => $Claims->estimated_close_date,
                                'count_liubio' => count($count_liubio)
                            ];
                        array_push($pdf_data[$v->user_id]['tenders'], $t_ar);
                    }
                }                        
                foreach ($pdf_data as $user_id => $d) {
                    // $PaymentNoticePdf = new PaymentNoticePdf($d['user'],$d['tenders'],$d['totalAmount'],$d['order_id']);
                    // $pdf_path = $PaymentNoticePdf->savePdf();
                    // $pdf_path = url('/front/PaymentNoticePdf/'.$d["pay_date"]);
                    // 結標信寄法
                    $m = new MailTo;
                    $m->tender_document_start_to_repay($user_id,$d['user'],$d['tenders'],$d['totalAmount']);
                }

            $tenderIdArray = [];
            $tenderIdsData = DB::select('SELECT
                td.tender_documents_id
            FROM
                tender_documents AS td
            LEFT JOIN claims AS c
            ON
                c.claim_id = td.claim_id
            WHERE
            c.claim_state = 2 AND td.is_order_create = 0');

            foreach ($tenderIdsData as $key => $value) {
                array_push($tenderIdArray,$value->tender_documents_id);
            }

            $orderData = DB::select('SELECT
                                            SUM(td.amount) as expected_amount,
                                            u.virtual_account as virtual_account,
                                            u.user_id as user_id
                                        FROM
                                            tender_documents AS td
                                        LEFT JOIN claims AS c
                                        ON
                                            c.claim_id = td.claim_id
                                        LEFT JOIN users AS u
                                        ON
                                            u.user_id = td.user_id
                                        WHERE
                                            c.claim_state = 2 AND td.is_order_create = 0
                                        GROUP BY
                                            u.user_id');

            $pdf_data = [];
            $pay_day = [];
            foreach ($orderData as $k => $v) {
                $od = new Order;
                $od->virtual_account = $v->virtual_account;
                $od->expected_amount = $v->expected_amount;
                $od->created_at = date('Y-m-d H:i:s');
                $od->updated_at = date('Y-m-d H:i:s');
                $od->save();
                $this->loggSchedule('apiCreateOrder','OrderId'.$od->order_id,['virtual_account='.$od->virtual_account,'expected_amount='.$od->expected_amount]);

                $td = Tenders::select('tender_documents_id')->where('user_id',$v->user_id)->get();

                $pdf_data[$v->user_id] = [
                    // 'order_id' => $od->order_id,
                    'user' => (new User)->getUserBankAccountInfo($v->user_id),
                    'tenders' => [],
                    'totalAmount' => $od->expected_amount,
                ];
                // $pdf_data[$v->user_id] = [
                //     'pay_date' => date("Y-m-d",strtotime($od->created_at)),
                //     'tenders' => []
                // ];

                foreach ($td as $key => $value) {
                    if(in_array($value->tender_documents_id,$tenderIdArray)){
                        //如果這個user_id 找出來的tender 是需要轉換的 tender
                        $tender = Tenders::find($value->tender_documents_id);
                        $tender->order_id = $od->order_id;
                        $tender->is_order_create = 1;
                        $tender->updated_at = date('Y-m-d H:i:s');
                        $tender->save();
                        $Claims = Claim::find($tender->claim_id);
                        $count_liubio = DB::select('select * from tender_documents where claim_id in(select claim_id from claims where claim_state = 3 and estimated_close_date = ?)and user_id = ?',[$Claims->estimated_close_date,$v->user_id]);
                        $t_ar = [
                            'tender_id' => $value->tender_documents_id,
                            'claim_certificate_number' => $tender->claim_certificate_number,
                            'should_paid_at' => $tender->should_paid_at,
                            'amount' => $tender->amount,
                            'estimated_close_date' => $Claims->estimated_close_date,
                            'count_liubio' => count($count_liubio)
                        ];
                        array_push($pdf_data[$v->user_id]['tenders'],$t_ar);
                    }
                }
            }
            foreach ($pdf_data as $user_id => $d) {
                // $PaymentNoticePdf = new PaymentNoticePdf($d['user'],$d['tenders'],$d['totalAmount'],$d['order_id']);
                // $pdf_path = $PaymentNoticePdf->savePdf();
                // $pdf_path = url('/front/PaymentNoticePdf/'.$d["pay_date"]);
                // 結標信寄法
                $m = new MailTo;
                $m->tender_document_start_to_repay2($user_id,$d['user'],$d['tenders'],$d['totalAmount']);
            }
            DB::commit();    

        } catch (\Throwable $th) {
            DB::rollback();
            // dd('fail');
            $this->loggSchedule('apiCreateOrder','Fail',[$th]);

        }

    }
//結標信寄法
// $m = new MailTo;
// $m->tender_document_start_to_repay($tender->user_id);

    public function claim_4_pdf(){
        $CreatePdf = new CreatePdf;
        $CreatePdf->init();
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * 彰銀API明文解密
     */
    public function bankSendPlanText(Request $req)
    {
        if (!empty($_SERVER["HTTP_CLIENT_IP"])){
            $ip = $_SERVER["HTTP_CLIENT_IP"];
        }elseif(!empty($_SERVER["HTTP_X_FORWARDED_FOR"])){
            $ip = $_SERVER["HTTP_X_FORWARDED_FOR"];
        }else{
            $ip = $_SERVER["REMOTE_ADDR"];
        }
        if($ip!="125.227.159.140" and $ip!="210.71.188.87"){
            exit();
        }
        $plink = mysqli_connect("localhost","kqzwlrrm_pp_user","jCgz91Ib8}uR","kqzwlrrm_ppo_nline");
        mysqli_query($plink,"set names utf8");
        $req_ip = $req->ip();
        $all = $req->all();
        $all['request_ip'] = $req_ip;
        $thisAmount = $all['AMT'];
        $nt = date("Y-m-d H:i:s");
        $sql="INSERT INTO bank_api_ctx( request_ip, inacctno, amt, entdate, txdate, txtime, hcode, source, status, created_at, updated_at) value
        ('".$all['request_ip']."','".$all['INACCTNO']."','".$all['AMT']."','".$all['ENTDATE']."','".$all['TXDATE']."','".$all['TXTIME']."','".$all['HCODE']."','".$all['SOURCE']."','0','".$nt."','".$nt."')";
        mysqli_query($plink,$sql);
        //用 INACCTNO 找到User
        $sql="select user_id from users where virtual_account = '".$all['INACCTNO']."'";
        $ro = mysqli_query($plink,$sql);
        $al = mysqli_num_rows($ro);
        $row = mysqli_fetch_assoc($ro);
        $user = $row["user_id"];
        if($al <1){
            echo "Server ERROR Repeat or Not Found User";
            exit();
        }
        //找出這使用者底下所有tender "待繳款" 的 金額總和及結標時間(開始繳款時間)
        $sql = "SELECT td.tender_documents_id tid, td.amount mm,c.estimated_close_date cc,td.order_id od , td.claim_certificate_number ccn FROM `tender_documents` td,claims c where td.claim_id=c.claim_id and td.tender_document_state = 5 and td.user_id = '". $user."' order by c.estimated_close_date";
        $ro1 = mysqli_query($plink,$sql);
        $row1 = mysqli_fetch_assoc($ro1);
        $mybill = 0;
        $ar_t = "'".$row1["tid"]."'";
        $ar_o = "'".$row1["od"]."'";
        $ar_p = " ";
        $inday = date("Y-m-d",strtotime($row1["cc"]));
        do{
            $mybill += $row1["mm"];
            $ar_t .= " , '".$row1["tid"]."'";
            $ar_o .= " , '".$row1["od"]."'";
            $ar_p .= $row1["ccn"]." ";
        }while($row1 = mysqli_fetch_assoc($ro1));

        //用API傳送的inacctno 找出所有state = 0 及 結標時間(開始繳款時間) 的紀錄的金額總和
        $sql="select amt,bank_api_ctx_id mm from bank_api_ctx where status = 0 and inacctno = '".$all['INACCTNO']."' and txdate >= '".$inday."'";
        $ro2 = mysqli_query($plink,$sql);
        $row2 = mysqli_fetch_assoc($ro2);
        $inmoney = 0;
        $ar_b = "'".$row2["mm"]."'";
        do{
            $inmoney += $row2["amt"];
            $ar_b .= " , '".$row2["mm"]."'";
        }while($row2 = mysqli_fetch_assoc($ro2));
        // 使用者待繳款金額 == 所有這使用者未沖帳金額總和
        if($inmoney==$mybill){
            //所有這使用者未沖帳資料壓成 已確認
            $sql = "update tender_documents set tender_document_state = 1,paid_at = '".$nt."' where tender_documents_id in(".$ar_t.")";
            mysqli_query($plink,$sql);
            $sql = "update bank_api_ctx set hcode = 0, status = 1 where bank_api_ctx_id in(".$ar_b.")";
            mysqli_query($plink,$sql);
            $sql = "update orders set actual_amount = expected_amount , is_send_sms = 1 where order_id in(".$ar_o.")";
            mysqli_query($plink,$sql);

            $m = new MailTo;
            $m->user_paid_confirmed($user,$ar_p);

            echo "OK";
        }else{
            echo "OK";
        }
        exit();
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
        //$cc = $req->all();
        //print_r($cc);
        //exit();
        //try {
            $req_ip = $req->ip();
            $all = $req->all();
            $all['request_ip'] = $req_ip;
            //儲存資料
            $bankApiCtx = new BankApiCtx;
            $bankApiCtxSave = $bankApiCtx->autoSave($all);

            $thisAmount = $all['AMT'];
            //用 INACCTNO = user.virtual_account 找到User
            $user = User::where('virtual_account',$all['INACCTNO'])->first();

            if($bankApiCtxSave && isset($user) && !is_null($user)){
                //用本次API丟的inacctno 找出所有state = 0 的紀錄
                $bankApiCtx_totalAmt = BankApiCtx::select(DB::raw('SUM(amt) as totalAmt'))->where('inacctno',$all['INACCTNO'])->where('status',0)->first()->totalAmt;
                //找出這使用者底下所有tender "待繳款" 的 金額總和
                $user_unpaid_amount = Tenders::select(DB::raw('IFNULL(SUM(amount),0) as totalAmount'))->where('user_id',$user->user_id)->where('tender_document_state',5)->first()->totalAmount;
                // dd($user_unpaid_amount,$thisAmount,$bankApiCtx_totalAmt);

                // 使用者待繳款金額 == 這次API金額  ||  使用者待繳款金額 == 所有這使用者API未沖帳金額總和
                if($user_unpaid_amount == $thisAmount || $user_unpaid_amount == $bankApiCtx_totalAmt){
                    //所有這使用者API未沖帳資料壓成 已確認
                    BankApiCtx::where('inacctno',$all['INACCTNO'])->where('status',0)->update([
                        'status' => 1,
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    //更新Tender對應的order
                    $orders = Tenders::select('tender_documents_id','order_id')->where('user_id',$user->user_id)->where('tender_document_state',5)->get();
                    foreach ($orders as $od) {
                        $order = Order::find($od->order_id);
                        if($order){
                            $order->virtual_account = $all['INACCTNO'];
                            $order->actual_amount = $order->expected_amount;
                            $order->updated_at = date('Y-m-d H:i:s');
                            $order->save();
                        }
                        //$tender = Tenders::find($od->tender_documents_id);
                        $tender = Tenders::find($od->order_id);
                        $tender->paid_at = $all['TXDATE'];
                        $tender->tender_document_state = 1;
                        $tender->updated_at = date('Y-m-d H:i:s');
                        $tender->save();
                        $m = new MailTo;
                        $m->user_paid_confirmed($tender->user_id);
                    }
                }
                return "OK";
            }else{
                return "Server ERROR Repeat or Not Found User";
            }
            /*
        } catch (\Throwable $th) {
            return "Server ERROR";
        }
        */
    }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////GET//////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
    public function bankSendPlanTextGet(Request $req)
    {
        //$cc = $req->all();
        //print_r($_GET);
        //phpinfo();
        //try {
            $req_ip = $_SERVER['REMOTE_ADDR'];
            $all = $_GET;
            $all['request_ip'] = $req_ip;
        //print_r($all);
        //exit();
            //儲存資料
            $bankApiCtx = new BankApiCtx;
            $bankApiCtxSave = $bankApiCtx->autoSave($all);

            $thisAmount = $all['AMT'];
            //用 INACCTNO = user.virtual_account 找到User
            $user = User::where('virtual_account',$all['INACCTNO'])->first();

            if($bankApiCtxSave && isset($user) && !is_null($user)){
                //用本次API丟的inacctno 找出所有state = 0 的紀錄
                $bankApiCtx_totalAmt = BankApiCtx::select(DB::raw('SUM(amt) as totalAmt'))->where('inacctno',$all['INACCTNO'])->where('status',0)->first()->totalAmt;
                //找出這使用者底下所有tender "待繳款" 的 金額總和
                $user_unpaid_amount = Tenders::select(DB::raw('IFNULL(SUM(amount),0) as totalAmount'))->where('user_id',$user->user_id)->where('tender_document_state',5)->first()->totalAmount;
                // dd($user_unpaid_amount,$thisAmount,$bankApiCtx_totalAmt);

                // 使用者待繳款金額 == 這次API金額  ||  使用者待繳款金額 == 所有這使用者API未沖帳金額總和
                if($user_unpaid_amount == $thisAmount || $user_unpaid_amount == $bankApiCtx_totalAmt){
                    //所有這使用者API未沖帳資料壓成 已確認
                    BankApiCtx::where('inacctno',$all['INACCTNO'])->where('status',0)->update([
                        'status' => 1,
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    //更新Tender對應的order
                    $orders = Tenders::select('tender_documents_id','order_id')->where('user_id',$user->user_id)->where('tender_document_state',5)->get();
                    foreach ($orders as $od) {
                        $order = Order::find($od->order_id);
                        if($order){
                            $order->virtual_account = $all['INACCTNO'];
                            $order->actual_amount = $order->expected_amount;
                            $order->updated_at = date('Y-m-d H:i:s');
                            $order->save();
                        }
                        $tender = Tenders::find($od->tender_documents_id);
                        $tender->paid_at = $all['TXDATE'];
                        $tender->tender_document_state = 1;
                        $tender->updated_at = date('Y-m-d H:i:s');
                        $tender->save();
                        $m = new MailTo;
                        $m->user_paid_confirmed($tender->user_id);
                    }

                }
                return "OKG";
            }else{
                return "Server ERROR Repeat or Not Found User";
            }
        } catch (\Throwable $th) {
            return "Server ERROR";
        }
    }
*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public function checkClaimClosed()
    {
        try {
            $claim0 = Claim::select('claim_id')->where('claim_state',0)->get();
            foreach($claim0 as $k => $v){
                $c0 = Claim::find($v->claim_id);
                $s0 = new State0($c0);
                $itWillClose = $s0->init(true);
                if($itWillClose == 'itwillclose'){
                    return true;
                }
            }
            return false;
        } catch (\Throwable $th) {
            //throw $th;
            dd($th);
            return false;
        }


    }
}
